/**==================================================================
 [1번 문제]
  - 클래스(Class)와 구조체(Struct)의 차이점은? 가장 중요한 차이점 위주로 간단하게 서술.
 ===================================================================**/

//








/**==================================================================
 [2번 문제]
  - 아래의 코드 예제에서, Bclass는 Aclass를 상속하고 있다. Bclass의 저장속성인
    z를 고려해서, Bclass의 지정생성자를 한개이상 구현하고, 상위(Aclass)의 지정생성자
    (init(x: Int, y: Int))를 "지정생성자"(⭐️)로 재정의.
    (편의생성자 아님! 내부는 자유롭게 구현.)
 ===================================================================**/


class Aclass {
    var x: Int
    var y: Int
    
    init(x: Int, y: Int) {
        self.x = x
        self.y = y
    }
    
    convenience init() {
        self.init(x: 0, y: 0)
    }
}



// 아래의 주석을 제거하고 코드를 구현

//class Bclass: Aclass {
//
//    var z: Int
//
//    // 이 부분에 지정생성자를 2개 (상위의 지정생성자를 재정의한 것 포함) 구현
//
//
//
//}




/**==================================================================
 [3번 문제]
  - 아래 Hero 클래스가 구현되어 있습니다. 해당 Hero클래스는 이름(name)과 아이디(id)로
    인스턴스를 생성할 수 있는데, 해당 클래스를 확장(Extension)해서,
    이름만으로도 인스턴스를 생성할 수 있는.. (확장에서) 생성자를 구현.
    (아이디는 0으로 셋팅되도록 구현.)
    (힌트. 확장에서, 생성자의 구현에서, 주의할점은...?)
 ===================================================================**/



class Hero {
    var name: String
    var id: Int
    
    init(name: String, id: Int) {
        self.name = name
        self.id = id
    }
}

extension Hero {
    // 이 부분을 이름만 가지고 생성할 수 있는 생성자로 구현.

    
    
    
}


var hero1 = Hero(name: "아이언맨", id: 0)
var hero2 = Hero(name: "캡틴아메리카", id: 1)
var hero3 = Hero(name: "헐크", id: 2)



// 위의 확장에서, 생성자를 제대로 구현하면 아래의 코드가 사용 가능해 짐.
//var hero4 = Hero(name: "토르")
//var hero5 = Hero(name: "스파이더맨")



/**==================================================================
 [4번 문제]
  - Any와 AnyObject타입의 차이는 뭔가요? 아는대로 간단하게 서술.
 ===================================================================**/

//








/**==================================================================
 [5번 문제]
  - 아래의 조건을 만족하는 RemoteControl 프로토콜의 구현을 완성.
    (조건)
    (1) name 속성(타입: String)을 요구사항으로 선언
        (최소한의 요구사항은 읽기 속성 강제하기)
    (2) turnOn 메서드를 요구사항으로 선언
        (input: 없음, output: Bool)
    (3) turnOff 메서드를 요구사항으로 선언
        (input: (num: Int), output: Bool)
 ===================================================================**/

// RemoteControl 프로토콜
protocol RemoteControl {
    // 이 내부의 코드를 완성.
    
    
}







/**==================================================================
 [6번 문제]
  - 프로토콜(Protocol)의 확장(Extension)이 어떤 개념인가요? 아는대로 간단하게 서술.
 ===================================================================**/

//










/**==================================================================
 [7번 문제]
  - 고차함수를 사용해서, 아래 array배열에서, 5보다 큰 짝수를 뽑기. 해당 뽑아낸
    숫자들을 evenNumbersArray 변수에 담으면 됨.
    (힌트. 고차함수 두번 사용 가능)
 ===================================================================**/

let array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]


// 아래, array 배열에 고차함수 사용하는 코드 완성.
var evenNumbersArray = array // [이 부분을 지우고, 고차함수로 완성하시면 됨.]




// 이 코드는 출력(확인)을 위한 코드.
print(evenNumbersArray)





/**>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 앨런Swift문법 마스터 스쿨 주차 시험 참조
 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>**/