/**==================================================================
 [1번 문제]
  - 아래의 코드 예제에서, Bclass는 Aclass를 상속하고 있다. Bclass의 저장속성인
    z를 고려해서, Bclass의 지정생성자를 한개이상 구현하고, 상위(Aclass)의 지정생성자
    (init(x: Int, y: Int))를 편의생성자로 재정의.
 ===================================================================**/


class Aclass {
    var x: Int
    var y: Int
    
    init(x: Int, y: Int) {
        self.x = x
        self.y = y
    }
    
    convenience init() {
        self.init(x: 0, y: 0)
    }
}



// 아래의 주석을 제거하고 코드를 구현

//class Bclass: Aclass {
//
//    var z: Int
//
//    // 이 부분에 지정생성자 및 편의 생성자(상위의 지정생성자를 재정의해서) 구현
//
//
//
//}






/**==================================================================
 [2번 문제]
  - 클래스에서 convenience(편의) 생성자는 어떤 개념인가? 간단하게 서술.
 ===================================================================**/


//








/**==================================================================
 [3번 문제]
  - 아래의 SubClass에서, 상위의 SuperClass의 sayHello 메서드를 재정의해서,
    아래 처럼 출력되도록 구현.
 
    "안녕하세요."   // super호출 코드로 구현
    "반갑습니다."
    "잘 부탁드려요."
 ===================================================================**/


class SuperClass {
    func sayHello() {
        print("안녕하세요.")
    }
}



class SubClass: SuperClass {
    // 메서드 재정의 코드 구현

    
}


// 코드 실행
var subClass = SubClass()
subClass.sayHello()


// 원하는 출력
// "안녕하세요."
// "반갑습니다."
// "잘 부탁드려요."







/**==================================================================
 [4번 문제]
  - 스위프트의 기본 타입인 Int(정수형)를 확장해서, 언제든지 정수 인스턴스를 제곱(square)
    하는 함수를 만드려고 합니다. 아래, square함수의 내부 구현을 완성.
    (개념: 확장에서, 메서드 구현)
 ===================================================================**/

// 제곱하는 메서드 만들어 보기

extension Int {
    // 아래 제곱(square) 함수의 내부 구현을 완성.
    func square() {
        
    }
}


// 제대로 구현했는지 확인하는 코드
var someInt = 5
someInt.square()
print(someInt)
// (제대로 구현했다면) 5를 제곱하면, 결과로 25가 출력되면 됨.





/**==================================================================
 [5번 문제]
  - 아래 Hero 클래스가 구현되어 있다. 해당 Hero클래스는 이름(name)과 아이디(id)로
    인스턴스를 생성할 수 있는데, 해당 클래스를 확장(Extension)해서,
    이름만으로도 인스턴스를 생성할 수 있는.. (확장에서) 생성자를 구현.
    (아이디는 0으로 셋팅되도록 구현하면 됨.)
    (힌트. 확장에서, 생성자의 구현에서, 주의할점은...?)
 ===================================================================**/



class Hero {
    var name: String
    var id: Int
    
    init(name: String, id: Int) {
        self.name = name
        self.id = id
    }
}

extension Hero {
    // 이 부분을 이름만 가지고 생성할 수 있는 생성자로 구현.

    
    
    
}


var hero1 = Hero(name: "아이언맨", id: 0)
var hero2 = Hero(name: "캡틴아메리카", id: 1)
var hero3 = Hero(name: "헐크", id: 2)



// 위의 확장에서, 생성자를 제대로 구현하면 아래의 코드가 사용 가능해 짐.
//var hero4 = Hero(name: "토르")
//var hero5 = Hero(name: "스파이더맨")