/**==================================================================
 [1번 문제]
  - 클래스나 구조체에서 initializer(생성자)의 역할이 무엇인가?
 ===================================================================**/

//








/**==================================================================
 [2번 문제]
  - 아래 Dog클래스의 생성자를 완성.
 ===================================================================**/


// 주석을 제거하고 구현하세요.
//class Dog {
//    var name: String
//    var weight: Int
//
//    // 생성자 구현 하기 (파라미터 이름 구현은 자유)
//
//
//}






/**==================================================================
 [3번 문제]
  - 클래스와 구조체의 근본적인 메모리 구조의 차이점에 대해서, 간단하게 설명.
    (힌트. Heap(힙)과 Stack(스택)을 참고적으로)
 ===================================================================**/

//












/**==================================================================
 [4번 문제]
  - 클래스나 구조체에서 지연(lazy) 저장 속성은 뭔가요? 왜 필요할지 간단하게 서술.
 ===================================================================**/

//









/**==================================================================
 [5번 문제]
  - 아래의 코드를 활용해,
    (1) 타입 저장 속성을 구현. 문자열 타입 저장 속성을 구현.
        (힌트. 종을 의미하는 species의 변수를 만들어 "Dog"이라는 문자열을 저장.)
    (2) 또한 해당 타입 저장 속성에 접근하는 코드를 구현.
 ===================================================================**/



class Dog2 {
    
    //(여기에) 타입 저장 속성의 구현
    
    
    
    var name: String
    var weight: Double
    
    init(name: String, weight: Double) {
        self.name = name
        self.weight = weight
    }

}


// 그리고 해당 타입 저장 속성에 접근하는 한줄의 코드 구현 (힌트. 타입 속성)










/**==================================================================
 [6번 문제]
  - 아래의 코드 예제에서, Bclass는 Aclass를 상속하고 있다. Bclass의 저장속성인
    z를 고려해서, Bclass의 지정생성자를 한개이상 구현하고, 상위(Aclass)의 지정생성자
    (init(x: Int, y: Int))를 편의생성자로 재정의.
    (자유롭게 구현.)
 ===================================================================**/


class Aclass {
    var x: Int
    var y: Int
    
    init(x: Int, y: Int) {
        self.x = x
        self.y = y
    }
    
    convenience init() {
        self.init(x: 0, y: 0)
    }
}



// 아래의 주석을 제거하고 코드를 구현

//class Bclass: Aclass {
//
//    var z: Int
//
//    // 이 부분에 지정생성자 및 편의 생성자(상위의 지정생성자를 재정의해서) 구현
//
//
//
//}





/**==================================================================
 [7번 문제]
  - 아래의 코드를 이용해 Singleton패턴 구현을 위한 코드를 완성.
 ===================================================================**/



class Singleton {
    // 아래 주석 제거후, 싱글톤 구현을 위한 속성 완성
    // let shared
    var userInfoId = 12345

    // 생성자 구현 완성
    
}



/**==================================================================
 앨런Swift문법 마스터 스쿨 주차 시험 참조
 ===================================================================**/
