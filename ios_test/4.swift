/**==================================================================
 [1번 문제]
  - 클래스나 구조체에서 initializer(생성자)의 역할이 무엇인가?
 ===================================================================**/

//








/**==================================================================
 [2번 문제]
  - 아래 Dog클래스의 생성자를 완성.
 ===================================================================**/


// 주석을 제거하고 구현하세요.
//class Dog {
//    var name: String
//    var weight: Int
//
//    // 생성자 구현 하기 (파라미터 이름 구현은 자유)
//
//
//}






/**==================================================================
 [3번 문제]
  - 클래스와 구조체의 근본적인 메모리 구조의 차이점에 대해서, 간단하게 설명.
    (힌트. Heap(힙)과 Stack(스택)을 참고적으로)
 ===================================================================**/

//












/**==================================================================
 [4번 문제]
  - 클래스나 구조체에서 지연(lazy) 저장 속성은 뭔가요? 왜 필요할지 간단하게 서술.
 ===================================================================**/

//









/**==================================================================
 [5번 문제]
  - 아래의 코드를 활용해,
    (1) 타입 저장 속성을 구현. 문자열 타입 저장 속성을 구현.
        (힌트. 종을 의미하는 species의 변수를 만들어 "Dog"이라는 문자열을 저장.)
    (2) 또한 해당 타입 저장 속성에 접근하는 코드를 구현.
 ===================================================================**/



class Dog2 {
    
    //(여기에) 타입 저장 속성의 구현
    
    
    
    var name: String
    var weight: Double
    
    init(name: String, weight: Double) {
        self.name = name
        self.weight = weight
    }

}


// 그리고 해당 타입 저장 속성에 접근하는 한줄의 코드 구현 (힌트. 타입 속성)










/**==================================================================
 [6번 문제]
  - 아래의 코드 예제에서, Bclass는 Aclass를 상속하고 있다. Bclass의 저장속성인
    z를 고려해서, Bclass의 지정생성자를 한개이상 구현하고, 상위(Aclass)의 지정생성자
    (init(x: Int, y: Int))를 편의생성자로 재정의.
    (자유롭게 구현.)
 ===================================================================**/


class Aclass {
    var x: Int
    var y: Int
    
    init(x: Int, y: Int) {
        self.x = x
        self.y = y
    }
    
    convenience init() {
        self.init(x: 0, y: 0)
    }
}



// 아래의 주석을 제거하고 코드를 구현

//class Bclass: Aclass {
//
//    var z: Int
//
//    // 이 부분에 지정생성자 및 편의 생성자(상위의 지정생성자를 재정의해서) 구현
//
//
//
//}





/**==================================================================
 [7번 문제]
  - 아래의 코드를 이용해 Singleton패턴 구현을 위한 코드를 완성.
 ===================================================================**/



class Singleton {
    // 아래 주석 제거후, 싱글톤 구현을 위한 속성 완성
    // let shared
    var userInfoId = 12345

    // 생성자 구현 완성
    
}




/**==================================================================
 [8번 문제]
  - 클래스에서 convenience(편의) 생성자는 어떤 개념인가요? 아는대로 간단하게 서술.
 ===================================================================**/


//







/**==================================================================
 [9번 문제]
  - 아래의 SubClass에서, 상위의 SuperClass의 sayHello 메서드를 재정의,
    아래 처럼 출력되도록 구현.
 
    "안녕하세요."   // super호출 코드로 구현
    "반갑습니다."
    "잘 부탁드려요."
 ===================================================================**/


class SuperClass {
    func sayHello() {
        print("안녕하세요.")
    }
}



class SubClass: SuperClass {
    // 메서드 재정의 코드 구현

    
}


// 코드 실행
var subClass = SubClass()
subClass.sayHello()


// 원하는 출력
// "안녕하세요."
// "반갑습니다."
// "잘 부탁드려요."




/**==================================================================
 [10번 문제]
  - 아래의 코드는 앱을 만들 때 쓰이는 뷰컨트롤러 코드. 내부에서, 버튼이 눌리면
    버튼의 제목이 바뀌는 코드를 구현하려고 함. (그리고 아래의 코드는 스토리 보드와
    연결되어 있다고 가정합니다. 실제는 아니더라도)
  - 현재는 버튼의 제목이 "누르세요"라고 되어있다고 가정하고, 버튼을 실제 누르면
    버튼의 제목이 "눌렀음"으로 변경되도록 구현하려는 상황을 가정하는 예시.
  - 아래, 버튼의 제목이 바뀌는 코드를 구현.
    (참고. 타입 캐스팅의 예시 상황 이해를 위한 코드)
    (힌트. button의 타이틀(제목)을 바꿀 수 있는 메서드는?)
 ===================================================================**/


class ViewController {
    
    @IBAction func buttonDidTapped(sender: Any) {
        let button = sender as! UIButton
        
        // 버튼의 타이틀(제목)을 바꾸는 코드를 작성 ==> 버튼은 "눌렸음"라는 타이틀로 변경하려함
        //button.
    }
    
}





/**==================================================================
 [11번 문제]
  - 아래의 코드는 부모클래스를 상속하는, 상속관계의 코드. 현재 Undergraduate
    인스턴스가 Person타입으로 person1 상수에 담겨있는데,
    해당 인스턴스가 가진 저장 속성 중에 하나인 "전공"을 출력하려고 함.
    print(person1.major)
    전공을 출력하기 위해, 필요한 코드를 중간에 삽입.
    (힌트. 타입 캐스팅)
 ===================================================================**/


class Person {
    var id = 0
}

class Student: Person {
    var studentId = 1
}

class Undergraduate: Student {
    var major = "전공"
}



let person1: Person = Undergraduate()

// 아래 "전공"을 출력하기 위해서, 중간에 코드를 삽입.
// (필요한 경우, 프린트 코드의 person1 상수를 변경해도 됨.)






//print(person1.major)    // "전공" 출력을 원함



/**==================================================================
 [12번 문제]
  - 클래스와 구조체, 열거형에서 확장(Extension)의 개념이 뭘까? 간단하게 서술.
 ===================================================================**/


//






/**==================================================================
 [13번 문제]
  - 프로토콜(Protocol)의 개념이 뭘까요? 간단하게 서술.
 ===================================================================**/


//







/**==================================================================
 [14번 문제]
  - 아래의 RemoteControl 프로토콜을 채택한 SmartPhone 클래스의 구현을 완성.
    (조건)
    (1) name 속성은 계산 속성으로 구현.
        get블록 - "아이폰"을 리턴하도록 구현
        set블록 - 내부 구현은 안해도 됨
    (2) turnOff 메서드는
        "꺼졌습니다."를 출력하도록 구현
 ===================================================================**/

// RemoteControl 프로토콜
protocol RemoteControl {
    var name: String { get }
    func turnOff()
}


// RemoteControl 프로토콜을 채택한 SmarPhone클래스
//class SmartPhone: RemoteControl {
//    // 내부 구현
//
//
//
//}





/**==================================================================
 [15번 문제]
  - 아래에서는 함수를 정의(1)하고, 해당 함수를 실행(2)하는 코드. 아래의 (2)코드를
    간단한 형태 클로저로 변형. 아는 한에서 가장 간단한 형태로 변형한 클로저를 작성.
 ===================================================================**/


// (1) (콜백함수를 사용한)함수를 정의

func performClosure(param: (String) -> Int) {
    param("Swift")
}

// (2) 변형하고자 하는 클로저의 형태 (변형 전) - 위에서 정의된 함수를 실행 / 실행하면서, 클로저(함수)를 사용

performClosure(param: { (str: String) in
    return str.count
})


// (변형하고자 하는 코드) 가장 간단한 형태의 클로저로 변형된 코드를 작성

performClosure(param: { (str: String) in
    return str.count
})




/**==================================================================
 앨런Swift문법 마스터 스쿨 주차 시험 참조
 ===================================================================**/
